// 加载共享库
@Library("mylib@main") _

// 导入库
import org.devops.*

// New实例化
def checkout = new Checkout()
def build = new Build()
def notice = new Notice()
def unitTest = new UnitTest()
def custom = new Custom()
def codeScan = new CodeScan()
def gitlab = new GitLab()
def artifact = new Artifact()
def docker = new Docker()
def kubernetes = new Kubernetes()
def projectCustom = new ProjectCustom()

// 流水线
pipeline {
    agent { label "build" }

    options {
        skipDefaultCheckout true
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '180', numToKeepStr: '90')
    }

    parameters {
        // 插件BUG：defaultValue的值必须为存在的分支或标签，构建成功一次后，才可获取全部远程分支与标签！（优先取共享库分支列表，谨慎使用！）【Jenkins Master、Slave架构需在Master节点生成ssh key并配置至Git代码仓库中！】
        gitParameter(branchFilter: 'origin/(.*)', tagFilter: "*", defaultValue: 'main', name: 'branchName',
                type: 'PT_BRANCH_TAG', quickFilterEnabled: true, sortMode: 'DESCENDING_SMART', listSize: '5',
                useRepository: "http://192.168.100.150/devops/devops-web-backend.git")
//        string defaultValue: 'v1.3.0_daily_build', description: '注意：选择应用发布分支', name: 'branchName'
        choice choices: ['dev01', 'dev02', 'test01', 'test02'], description: '环境列表', name: 'envList'
        choice choices: ['2048Mi', '3072Mi', '4096Mi', '5120Mi', '6144Mi'], description: '最大内存', name: 'memory'
        choice choices: ['1', '2', '3', '4', '5'], description: '副本数', name: 'replicaCount'
        choice choices: ['devops.web.backend'], description: '服务访问的域名（注意：域名末尾会追加环境选择：domainName.dev01）', name: 'domainName'
        choice choices: ['true', 'false'], description: '是否跳过代码扫描', name: 'skipSonar'
        choice choices: ['true', 'false'], description: '是否跳过单元测试', name: 'skipTests'
        choice choices: ['false', 'true'], description: '是否跳过CD', name: 'skipCD'
    }

    environment {
        // GitLab用户密钥访问凭据Id：id_ed25519 (GitLab-Enterprise-私钥文件（192.168.100.150:/root/.ssh/id_ed25519）)
        gitlabKeysCredentialsId = "7f714471-562a-4ddd-884b-186f90556a9a"
        // 制品仓库地址
        artifactRegistry = "192.168.100.150:8081"
        // 制品仓库访问凭据Id：Nexus-admin-账号密码（192.168.100.150:8081）
        artifactCredentialsId = "adfe55cc-1f4a-444a-9c9f-7fc635c46a3c"
        // 制品仓库名称
        artifactRepository = "devops-artifacts"
        // 镜像仓库地址
        imageRegistry = "192.168.100.150:8082"
        // 镜像仓库访问凭据Id：Harbor-admin-账号密码（192.168.100.150:8082）
        imageRegistryCredentialsId = "cc81ccc9-962f-42ab-bbe6-fa9383c6938f"
        // SonarQube访问凭据Id：SonarQube-admin-token（192.168.100.150:9000）
        sonarqubeUserTokenCredentialsId = "c23d40dd-a6c8-4a17-a0d1-23dd795fe773"
        // DingTalk-robot-token（Jenkins钉钉群聊）
        dingTalkTokenCredentialsId = "8c6083c7-e1c2-47c0-9367-b67a9469bcd5"
        // DingTalk-robot-id（Jenkins钉钉群聊）
        dingTalkRebotIdCredentialsId = "5213e392-d78e-4a9a-a37e-91f394309df1"
        // GitLab用户Token访问凭据Id：GitLab-DevOps-token（Your_GitLab_Enterprise_Edition_URL，users：devops）
        gitlabUserTokenCredentialsId = "36e10c3d-997d-4eaa-9e46-d9848d5d6631"

        // GitLab代码仓库地址
        srcUrl = "http://192.168.100.150/devops/devops-web-backend.git"
        // GitLab项目构建工具类型
        buildType = "mavenSkip"
        // 测试报告路径（多模块使用 "**/" ，单模块去掉 "**/"）
        reportsPath = '**/target/surefire-reports/*.xml'
        // Allure报告路径
        allureResultsPath = '**/target/allure-results'

        // 注意：Helm Chart仓库地址
        helmSrcUrl = "devops/devops-k8s-deployment.git"
        // 注意：Helm Chart分支名称
        helmBranchName = "main"
    }

    stages {

        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage("Checkout") {
            steps {
                script {
                    println("Checkout")
                    checkout.GetCode("${env.srcUrl}", "${params.branchName}", "${env.gitlabKeysCredentialsId}")
                }
            }
        }

        stage("Global") {
            steps {
                script {
                    // 任务名称截取构建类型（任务名称示例：devops-maven-service）
//                    env.buildType = "${JOB_NAME}".split("-")[1]
                    // JOB任务前缀（业务名称/组名称）
                    env.buName = "${JOB_NAME}".split('-')[0]
                    // 产品名称
                    env.productName = "${JOB_NAME}".split('-')[1]
                    // 服务/项目名称
//                    env.serviceName = "${JOB_NAME}".split('_')[0]
                    subName = "${JOB_NAME}".substring("${JOB_NAME}".indexOf('-') + 1) // 获取 - 后面的子字符串
                    env.serviceName = "${subName}".replaceFirst(/_.*/, "") // 替换第一个 "_" 及后面的字符为空

                    // Git项目Id
                    env.projectId = projectCustom.getProjectIdByProjectName("${env.serviceName}")
                    if ("${env.projectId}" == "null") {
                        env.projectId = gitlab.GetProjectId("${env.gitlabUserTokenCredentialsId}", "${env.buName}", "${env.serviceName}")
                    }
                    println("serviceName：${env.serviceName}，projectId：${env.projectId}")

                    // Git提交ID
                    env.commitId = gitlab.GetShortCommitIdByEightDigit()
                    // Git提交超链接
                    env.commitWebURL = gitlab.GetCommitWebURLByApi("${env.gitlabUserTokenCredentialsId}", "${env.projectId}", "${params.branchName}")
                    // 服务版本号（推荐定义："${branchName}-${commitId}"）
                    env.version = "${params.branchName}-${env.commitId}"

                    // 服务访问的域名
                    accessDomainName = projectCustom.getAccessDomainName("${params.domainName}")
                    if ("${accessDomainName}" == "null") {
                        env.accessDomainName = "${params.domainName}.${params.envList}"
                    } else {
                        env.accessDomainName = "${accessDomainName}.${params.envList}"
                    }
                    env.domainName = "${params.domainName}.${params.envList}"

                    // 服务部署的命名空间
                    env.namespace = "${env.buName}-${env.productName}-${params.envList}"

                    // 修改Jenkins构建描述
                    currentBuild.description = """ branchName：${params.branchName} \n namespace：${env.namespace} \n commitId：[${env.commitId}](${env.commitWebURL}) \n domainName： \n ${env.domainName} \n accessDomainName：${env.accessDomainName} """
                    // 修改Jenkins构建名称
                    currentBuild.displayName = "${env.version}"
                }
            }
        }

        stage("Build") {
            steps {
                script {
                    println("Build")
                    /*sh """
                       export JAVA_HOME=/opt/jdk1.8.0_391
                       mvn -v
                       mvn clean package --settings "${M2_HOME}"/conf/settings-jdk-1.8.xml -Dpmd.skip=true -Dcheckstyle.skip=true -DskipTests -Djaxb2.skip=true

                       export JAVA_HOME=/opt/jdk-17.0.9
                       export MAVEN_OPTS="-Dmaven.compiler.source=17 -Dmaven.compiler.target=17"

                       cp -ar /data/nfs/shared-tools/gams/ ./gams
                    """*/
                    build.CodeBuild("${env.buildType}")
                }
            }
        }

        stage("UnitTest") {
            when {
                environment name: 'skipTests', value: 'false'
            }
            steps {
                script {
                    if ("${env.buildType}" == "custom") {
                        println("构建类型为：custom，跳过UnitTest阶段，如需单元测试请使用符号：&& 拼接命令")
                    } else {
                        println("UnitTest")
                        // 防止JUnit阶段失败导致流水线无法继续执行
                        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                            // maven 多模块项目指定 entrypoint 启动类主模块的 junit 运行命令
                            if ("${env.buildType}" == "maven" || "${env.buildType}" == "mavenSkip") {
                                sh "mvn clean install -DskipTests && mvn -pl projectName-entrypoint test && mkdir -p ${env.allureResultsPath}"
                            } else {
                                unitTest.CodeTest("${env.buildType}")
                            }
                        }
                    }
                }
                // 保存测试报告（无论是否有报告都允许为空归档）
                archiveArtifacts artifacts: "${env.reportsPath}", allowEmptyArchive: true
                // 分析并发布JUnit测试报告（多模块项目使用 "**/" ，单模块去掉 "**/"）
                junit "${env.reportsPath}"
                // Allure分析报告
                println("AllureReport")
                allure includeProperties: false, jdk: '', results: [[path: "${env.allureResultsPath}"]]
            }
        }

        stage("CodeScan") {
            when {
                environment name: 'skipSonar', value: 'false'
            }
            steps {
                script {
                    println("CodeScan")
                    // 代码扫描 commit-status
                    codeScan.CodeScan_Sonar("${env.sonarqubeUserTokenCredentialsId}", "${env.gitlabUserTokenCredentialsId}",
                            "${params.branchName}", "${env.commitId}", "${env.projectId}")
                }
            }
        }

        // 上传制品（Format：raw）
        stage("PushArtifact") {
            steps {
                script {
                    // Dir：/buName/serviceName/branch-version/serviceName-version.suffix
                    // target/demo-0.0.1-SNAPSHOT.jar
                    if ("${env.buildType}" == "maven" || "${env.buildType}" == "mavenSkip") {
                        env.filePath = "target"
                        fileSuffix = "jar"
                        env.newFileName = "${env.serviceName}-${env.version}.${fileSuffix}"
                        // fileSuffix = env.fileName.split('\\.' as Closure)[-1]
                        originalFileName = sh returnStdout: true, script: "ls ${env.filePath} | grep -E ${fileSuffix}\$"
                        originalFileName = "${originalFileName}" - "\n"
                        // 重命名制品文件
                        sh "cd ${env.filePath} ; mv ${originalFileName} ${env.newFileName}"
                        // 上传制品
                        artifact.PushArtifactByApi("${env.artifactRegistry}", "${env.artifactCredentialsId}", "${env.artifactRepository}",
                                "${env.buName}/${env.serviceName}/${env.version}", "${env.buildType}", "${env.filePath}", "${env.newFileName}")
                    } else if ("${env.buildType}" == "npm" || "${env.buildType}" == "yarn") {
                        env.filePath = "dist"
                        fileSuffix = "tar.gz"
                        env.newFileName = "${env.serviceName}-${env.version}.${fileSuffix}"
                        sh """
                            cd ${env.filePath} && tar -zcvf ${env.newFileName} *
                        """
                        // 上传制品
                        artifact.PushArtifactByApi("${env.artifactRegistry}", "${env.artifactCredentialsId}", "${env.artifactRepository}",
                                "${env.buName}/${env.serviceName}/${env.version}", "${env.buildType}", "${env.filePath}", "${env.newFileName}")
                    } else {
                        env.result = sh returnStdout: true, script: "sh artifact.sh ${env.filePath} ${env.serviceName} ${env.version}" - "\n"
                        env.newFileName = "${env.result}" - "\n"
                        println("通过项目内自定义脚本上传制品")
                    }
                }
            }
        }

        stage("DockerBuild") {
            steps {
                script {
                    // 定义锁定资源的名称，例如：docker-images-lock
                    def resourceLock = "docker-images-lock"
                    lock(resource: resourceLock, inversePrecedence: true) {
                        // imageTag："${params.branchName}-${env.commitId}"
                        docker.DockerBuildAndPushImage("${env.imageRegistry}", "${env.imageRegistryCredentialsId}",
                                "${env.buName}", "${env.serviceName}", "${env.version}", "${env.filePath}",
                                "${env.newFileName}")
                    }
                }
            }
        }

        stage("HelmReleaseFile_CI") {
            steps {
                script {
                    // Git项目Id（devops-k8s-deployment）
                    k8sProjectId = gitlab.GetProjectId("${env.gitlabUserTokenCredentialsId}", "devops", "devops-k8s-deployment")
                    // Git文件模板名称
                    fileName = "values.yaml"
                    // Git上传文件路径：项目服务名称/values.yaml
                    filePath = "${env.serviceName}%2f${fileName}"
                    // 下载Kubernetes部署模板文件
                    fileData = gitlab.GetRepositoryFile("${env.gitlabUserTokenCredentialsId}", "${k8sProjectId}",
                            "${filePath}", "${env.helmBranchName}")
                    // Kubernetes发布模板文件内容替换并转换Base64（imagePath：镜像仓库地址/镜像名称:镜像标签）
                    base64Content = kubernetes.HelmReleaseTemplateFileReplaceAndConvertToBase64("${fileName}", "${fileData}",
                            "${env.imageRegistry}/${env.buName}/${env.serviceName}", "${env.version}")

                    // 上传替换后的版本文件（新建文件或者更新文件）
                    // gitlab文件内容变更（URL编码转义符： %2f = / ）
                    try {
                        gitlab.CreateRepositoryFile("${env.gitlabUserTokenCredentialsId}", "${k8sProjectId}", "${env.helmBranchName}", "${filePath}", "${base64Content}")
                    } catch (e) {
                        gitlab.UpdateRepositoryFile("${env.gitlabUserTokenCredentialsId}", "${k8sProjectId}", "${env.helmBranchName}", "${filePath}", "${base64Content}")
                    }
                }
            }
        }

        stage("CompleteHelmReleaseFile") {
            when {
                environment name: 'skipCD', value: 'false'
            }
            steps {
                script {
                    println("Checkout")
                    sh "[ -d ${env.namespace} ] || mkdir ${env.namespace}"
                    ws("${WORKSPACE}/${env.namespace}") {
                        checkout.GetCode("${env.helmSrcUrl}", "${env.helmBranchName}", "${env.gitlabKeysCredentialsId}")
                    }
                }
            }
        }

        stage("HelmReleaseFile_CD") {
            when {
                environment name: 'skipCD', value: 'false'
            }
            steps {
                script {
                    // Git文件模板名称
                    fileName = "values.yaml"
                    // Git模板文件路径：项目服务名称_Helm/values.yaml
                    filePath = "${env.namespace}/${env.serviceName}/${fileName}"
                    // 项目定制参数
                    Map projectParamsMap = projectCustom.getProjectParamsMap("${params.envList}")
                    // Kubernetes发布模板文件内容替换
                    kubernetes.HelmReleaseTemplateFileReplace("${filePath}", "${env.domainName}", "${env.accessDomainName}", "${params.memory}", "${params.replicaCount}", projectParamsMap)
                    println("projectParamsMap：${projectParamsMap}")
                }
            }
        }

        stage("HelmDeploy") {
            when {
                environment name: 'skipCD', value: 'false'
            }
            steps {
                script {
                    kubernetes.HelmDeploy("${env.namespace}", "${env.namespace}/${env.serviceName}", "${env.serviceName}")
                }
            }
        }

        stage("HealthCheck") {
            when {
                environment name: 'skipCD', value: 'false'
            }
            steps {
                script {
                    // 注意：自定义域名需配置Hosts文件！
                    try {
                        sleep(5)
                        result = sh returnStdout: true, script: """ curl "http://${env.domainName}/health" """ - "\n"
                        if ("ok" == result) {
                            println("Successful！")
                        }
                    } catch (Exception e) {
                        println(e)
                    }
                }
            }
        }

    }

    post {
        success {
            script {
//                notice.dingTalkNotice("${env.dingTalkTokenCredentialsId}")
                notice.dingTalkPluginNotice("${env.dingTalkRebotIdCredentialsId}")
            }
        }
        failure {
            script {
                notice.dingTalkPluginNotice("${env.dingTalkRebotIdCredentialsId}")
            }
        }
        unstable {
            script {
                notice.dingTalkPluginNotice("${env.dingTalkRebotIdCredentialsId}")
            }
        }
        /*always {
            // clean workspace build
            cleanWs()
        }*/
    }

}