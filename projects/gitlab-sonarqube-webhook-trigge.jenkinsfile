@Library("mylib@main") _

import org.devops.*

def gitlab = new GitLab()
def codeScan = new CodeScan()
def projectCustom = new ProjectCustom()
def notice = new Notice()

pipeline {
    agent { label "build" }

    options {
        skipDefaultCheckout true
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '180', numToKeepStr: '90')
    }

    environment {
        gitlabKeysCredentialsId = "a7d76450-d876-44a8-8d96-92f11cd013b0"
        sonarqubeUserTokenCredentialsId = "c23d40dd-a6c8-4a17-a0d1-23dd795fe773"
        sonarqubeHostUrl = "http://192.168.100.150:9000/sonarqube"
        dingTalkRebotIdCredentialsId = "7a711aa6-04b5-4a6d-9907-c0f6b90f6acc"
        gitlabUserTokenCredentialsId = "36e10c3d-997d-4eaa-9e46-d9848d5d6631"
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage("Global") {
            steps {
                script {
                    printEnvironmentInfo()
                    env.srcUrl = env.gitlabSourceRepoURL
                    env.buName = env.gitlabSourceNamespace
                    env.commitId = env.gitlabMergeRequestLastCommit
                    env.actionType = env.gitlabActionType
                    env.sourceBranch = env.gitlabSourceBranch
                    env.targetBranch = env.gitlabTargetBranch

                    env.repoName = env.gitlabSourceRepoURL?.tokenize('/')?.last()?.replace('.git', '')
                    env.projectKey = "${env.buName}-${env.repoName}"
                    env.commitShortId = env.commitId?.take(8)
                    env.projectId = gitlab.GetProjectId(env.gitlabUserTokenCredentialsId, env.buName, env.repoName)
                    env.version = "${env.sourceBranch}-${env.commitShortId}"
                    currentBuild.displayName = env.version
                }
            }
        }

        stage("CheckOut") {
            steps {
                script {
                    new Checkout().GetCode(env.srcUrl, env.sourceBranch, env.gitlabKeysCredentialsId)
                }
            }
        }

        stage("Build") {
            steps {
                script {
                    println("Build")
                    projectCustom.executeBuildByServiceName("${env.repoName}")
                }
            }
        }

        stage("CodeScan") {
            steps {
                script {
                    println("CodeScan Start")
                    def scanAllowed = env.actionType in ["MERGE", "PUSH"]
                    def mrInfo = scanAllowed ? codeScan.getMergeRequestInfo(env.actionType, env.sourceBranch, env.targetBranch, env.gitlabMergeRequestId,
                            env.projectId, env.srcUrl, env.gitlabUserTokenCredentialsId) : [performScan: false]
                    println "Merge Request Info: ${mrInfo}"
                    def EXCLUDED_TARGET_BRANCHES = ['integration', 'release']
                    if (EXCLUDED_TARGET_BRANCHES.any { "${mrInfo.targetBranch}"?.toLowerCase()?.contains(it) }) {
                        echo "❌ 目标分支 '${mrInfo.targetBranch}' 不允许触发代码扫描。"
                        updateGitlabCommitStatus name: 'sonarqube', state: 'skipped'
                        currentBuild.result = 'NOT_BUILT'
                        // 立即返回，跳过后续所有步骤和 post 操作
                        return
                    }

                    if (mrInfo.performScan) {
                        println "✅ 代码扫描条件满足，开始执行 Marge Sonar 扫描"
                        def result = codeScan.scanCodeWithSonarSkipUnchanged(
                                env.sonarqubeUserTokenCredentialsId,
                                env.gitlabUserTokenCredentialsId,
                                env.commitId,
                                env.projectId,
                                mrInfo.sourceBranch,
                                mrInfo.targetBranch,
                                mrInfo.mergeRequestId
                        )
                        if (!result) {
                            println "❌ Sonar 扫描失败，可能是代码未变更或其他原因。"
                            updateGitlabCommitStatus name: 'sonarqube', state: 'skipped'
                            currentBuild.result = 'NOT_BUILT'
                            return
                        }
                        timeout(time: 1, unit: 'MINUTES') {
                            def qg = waitForQualityGate()
                            if (qg.status == 'OK') {
                                println "✅ 代码质量检查通过，Quality Gate Status: ${qg.status}"
                                updateGitlabCommitStatus name: 'sonarqube', state: 'success'
                            } else {
                                updateGitlabCommitStatus name: 'sonarqube', state: 'failed'
                                println "❌ 代码质量检查未通过，Quality Gate Status: ${qg.status}"
                                currentBuild.result = 'UNSTABLE'
                            }
                        }
                        codeScan.SonarQubeMetricsAndNotify(
                                env.sonarqubeHostUrl,
                                env.projectKey,
                                mrInfo.sourceBranch,
                                mrInfo.mergeRequestId,
                                env.sonarqubeUserTokenCredentialsId,
                                env.dingTalkRebotIdCredentialsId)
                    } else {
                        echo scanAllowed ? "不是 Merge 源分支" : "当前条件不满足 Sonar 扫描要求"
                        updateGitlabCommitStatus name: 'sonarqube', state: 'skipped'
                        currentBuild.result = 'NOT_BUILT'
                        // 立即返回，跳过后续所有步骤和 post 操作
                        return
                    }
                }
            }
        }
    }

    post {
        failure {
            script {
                notice.dingTalkPluginNotice("${env.dingTalkRebotIdCredentialsId}")
                updateGitlabCommitStatus name: 'sonarqube', state: 'failed'
            }
        }
    }
}

// 工具方法区块
def printEnvironmentInfo() {
    echo "Source Branch: ${env.gitlabSourceBranch ?: '未定义'}"
    echo "Target Branch: ${env.gitlabTargetBranch ?: '未定义'}"
    echo "Gitlab ActionType: ${env.gitlabActionType}"
    echo "Gitlab MergeRequestId: ${env.gitlabMergeRequestId ?: '无'}"
}